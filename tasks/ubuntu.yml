---
- name: "Installing fabiodbr-ubuntu-customizations for Ubuntu 20.04 (focal)"
  assert:
    that:
      - ansible_distribution == 'Ubuntu'
      - ansible_distribution_version == '20.04'
      - ansible_distribution_release == 'focal'
    msg: "ABORTING: This appears to be {{ ansible_distribution }} {{ ansible_distribution_version }} ({{ ansible_distribution_release }})"

- name: "System packages upgrade"
  apt:
    upgrade: "yes"
    update_cache: yes
    cache_valid_time: 3600
    dpkg_options: "force-confold,force-confdef"

- name: apt-packages
  when: '"apt-packages" is defined and "apt-packages" in install'
  block:
    - name: "[apt-packages]: installing packages"
      apt:
        dpkg_options: "force-confold,force-confdef"
        autoremove: yes
        name: "{{ item }}"
        state: present
        cache_valid_time: 3600
      loop:
        - asciinema #terminal recording
        - apt-transport-https
        - bash-completion
        - curl #tool
        - ca-certificates
        - dconf-editor # advanced gnome settings editor
        - debian-goodies # checkrestart, needrestart, check-enhancements, dgrep, dglob, debget, dpigs, debman, debmany, popbugs, which-pkg-broke, dhomepage
        - debsecan #pgp
        - deluge #torrent
        - direnv
        - expect #tool
        - fonts-firacode #developer font
        - gettext #
        - git #versioning
        - glances #monitoring
        - gnome-tweak-tool
        - gnome-shell-extensions
        - gnome-themes-standard
        - gnome-shell-extensions
        - gnome-shell-extension-weather
        - htop #tool
        - httpie #curl
        - ipcalc #networking
        - kleopatra #pgp gui
        - lm-sensors #sensor
        - locate # file location tool
        - neofetch #bash eyecandy
        - ondir
        - peek #gif recorder
        - p7zip-full #compression
        - rsync #file tool
        - shotwell #image viewer
        - software-properties-common
        - scdaemon #pgp
        - screenfetch #screenshot
        - sysstat #monitoring
        - tilix #terminal
        - ubuntu-restricted-extras #extra packages
        - vim #editor
        - vlc #video player
        - zsh #shell

# inspiration: https://github.com/andrewrothstein/ansible-anaconda/blob/master/tasks/default.yml
- name: anaconda
  when: '"anaconda" is defined and "anaconda" in install'
  block:
    - name: "[anaconda]: install check"
      stat:
        path: "{{ anaconda_install_dir }}/bin/conda"
      register: installcheck
    - name: "Install Anaconda"
      when: not installcheck.stat.exists
      block:
        - name: "[anaconda]: dependencies"
          apt:
            name: "{{ item }}"
            update_cache: yes
            cache_valid_time: 3600
            state: latest
          loop:
            - libgl1-mesa-glx
            - libegl1-mesa
            - libxrandr2
            - libxss1
            - libxcursor1
            - libxcomposite1
            - libasound2
            - libxi6
            - libxtst6
        - name: "[anaconda]: downloading"
          get_url:
            url: "{{ anaconda_installer_url }}"
            dest: "{{ anaconda_installer_file }}"
            checksum: "md5:{{ anaconda_installer_md5_value }}"
            mode: 0550
            force: yes
        - name: "[anaconda]: installing"
          command: "bash {{ anaconda_installer_file }} -b -p /opt/anaconda3"
        - name: "Anaconda: add /opt/anaconda3/bin to PATH"
          lineinfile:
            path: /etc/profile # TODO: create file in /etc/profile.d
            state: present
            line: "PATH=$PATH:{{ anaconda_install_dir }}/bin"
        - name: "[anaconda]: changing ownership of {{ anaconda_install_dir }} to {{ user }}"
          file:
            path: "{{ anaconda_install_dir }}"
            state: directory
            owner: "{{ user }}"
            group: "{{ user }}"
            mode: 0755
            recurse: yes

- name: bash-powerline-shell
  when: '"bash-powerline-shell" is defined and "bash-powerline-shell" in install'
  block:
    - name: "[bash-powerline-shell]: powerline-shell"
      pip:
        name: powerline-shell
        state: latest
    - name: "[bash-powerline-shell]: fonts-powerline"
      apt:
        name: "fonts-powerline"
        state: latest
    - name: "[bash-powerline-shell]: activating"
      blockinfile:
        path: /etc/bash.bashrc
        insertafter: EOF
        content: |
          function _update_ps1() {
            PS1=$(powerline-shell $?)
          }
          if [[ $TERM != linux && ! $PROMPT_COMMAND =~ _update_ps1 ]]; then
            PROMPT_COMMAND="_update_ps1; $PROMPT_COMMAND"
          fi

- name: docker-ce
  when: '"docker-ce" is defined and "docker-ce" in install'
  block:
    - name: "[docker-ce]: install check"
      command: "apt -qq list docker-ce"
      register: installcheck
      changed_when: false
    - name: "install"
      when: installcheck.stdout.find("installed") == -1
      block:
        - name: "[docker-ce]: remove snap if present"
          snap:
            name: docker
            state: absent
        - name: "[docker-ce]: essential packages"
          apt:
            name: "{{ item }}"
          loop:
            - apt-transport-https
            - ca-certificates
            - curl
            - gnupg-agent
            - software-properties-common
        - name: "[docker-ce]: apt-keys"
          apt_key:
            url: "https://download.docker.com/linux/ubuntu/gpg"
            state: present
        - name: "[docker-ce]: add repository"
          apt_repository:
            repo: "deb [arch=amd64] https://download.docker.com/linux/ubuntu focal stable"
            state: present
        - name: "[docker-ce]: install"
          apt:
            name: docker-ce
            state: present
        - name: "[docker-ce]: docker group"
          group:
            name: docker
            state: present
        - name: "[docker-ce]: add {{ user }} to docker group"
          user:
            name: "{{ user }}"
            groups: "docker"
            append: yes

# Broken for Focal Fossa
# - name: Gimp
#   when: '"gimp" in install'
#   block:
#     - name: "[gimp]: ppa"
#       apt_repository:
#         repo: "ppa:otto-kesselgulasch/gimp"
#         validate_certs: no
#     - name: "[gimp]: apt install"
#       apt:
#         name: gimp
#         state: latest
#         cache_valid_time: 3600

- name: "Gnome themes and icons from github"
  become: yes
  become_user: "{{ user }}"
  ignore_errors: yes
  tags: gnome, themes
  when: '"gnome-themes-github" is defined and "gnome-themes-github" in install'
  block:
    - name: "[gnome-themes-github]: local folders"
      file:
        path: "{{ item }}"
        state: directory
      loop:
        - "/home/{{ user }}/.themes"
        - "/home/{{ user }}/.icons"
    - name: "[gnome-themes-github]: copying"
      git:
        repo: "{{ item.repo }}"
        depth: 1
        dest: "/home/{{ user }}/.themes/{{ item.name }}"
        force: yes
      with_items:
        - { repo: "https://github.com/EliverLara/Ant.git", name: "Ant" }
        - {
            repo: "https://github.com/keeferrourke/la-capitaine-icon-theme.git",
            name: "La-Capitaine",
          }
        - {
            repo: "https://github.com/btd1337/La-Sierra-Icon-Theme",
            name: "La-Sierra",
          }
        - { repo: "https://github.com/EliverLara/Nordic.git", name: "Nordic" }
        - {
            repo: "https://github.com/EliverLara/Nordic-Polar.git",
            name: "Nordic-Polar",
          }
        - {
            repo: "https://github.com/btd1337/eOS-Sierra-Gtk.git",
            name: "eOS-Sierra",
          }
    - name: "MacOS Themes"
      block:
        - name: "[gnome-themes-github: Gnome-Mc-OS]: git clone"
          git:
            repo: "https://github.com/paullinuxthemer/Mc-OS-themes.git"
            dest: "/home/{{ user }}/.themes/Mc-OS"
            depth: 1
            force: yes
        - name: "[gnome-themes-github: Gnome-Mc-OS]: copying"
          changed_when: false
          command: "rsync -a /home/{{ user }}/.themes/Mc-OS/{{ item.dir }} /home/{{ user }}/.themes/"
          with_items:
            - { dir: "McOS-CTLina-Gnome-1.3.2" }
            - { dir: "McOS-MJV-v2.0" }
            - { dir: "Mc-OS-Transparent-1.3" }
            - { dir: "MC-OS-2020-graphite" }

- name: "gnome-theme-flat-remix"
  when: '"gnome-theme-flat-remix" is defined and "gnome-theme-flat-remix" in install'
  block:
    - name: "[gnome-theme-flat-remix]: flax-remix PPA"
      apt_repository:
        repo: "ppa:daniruiz/flat-remix"
        validate_certs: no
      ignore_errors: yes
    - name: "[gnome-theme-flat-remix]: flat-remix install"
      apt:
        name: "{{ item }}"
      loop:
        - imagemagick
        - libglib2.0-dev-bin
        - flat-remix
        - flat-remix-gnome
        - flat-remix-gtk

- name: google-cloud-sdk
  when: '"google-cloud-sdk" is defined and "google-cloud-sdk" in install'
  tags: cli, google, devops
  block:
    - name: "[google-cloud-sdk]: packages"
      apt:
        name: apt-transport-https
        cache_valid_time: 3600
        state: present
    - name: "[google-cloud-sdk]: apt-key"
      apt_key:
        url: "https://packages.cloud.google.com/apt/doc/apt-key.gpg"
        keyring: "/usr/share/keyrings/cloud.google.gpg"
        state: present
    - name: "[google-cloud-sdk]: repository"
      apt_repository:
        repo: "deb [signed-by=/usr/share/keyrings/cloud.google.gpg] http://packages.cloud.google.com/apt cloud-sdk main"
    - name: "[google-cloud-sdk]: packages"
      apt:
        name: "{{ item }}"
        state: latest
      loop:
        - google-cloud-sdk
        - kubectl

- name: Google Chrome
  tags: chrome
  when: '"google-chrome" is defined and "google-chrome" in install'
  block:
    - name: "[google-chrome]: install check"
      command: "apt -qq list google-chrome-stable"
      register: installcheck
      changed_when: false
    - name: "install"
      when: installcheck.stdout.find("installed") == -1
      block:
        - name: "[google-chrome]: apt-keys"
          apt_key:
            url: "https://dl-ssl.google.com/linux/linux_signing_key.pub"
            state: present
        - name: "[google-chrome]: repository"
          apt_repository:
            repo: "deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main"
            filename: "google-chrome"
        - name: "[google-chrome]: install google chrome"
          apt:
            name: google-chrome-stable
            state: latest
        - name: "[google-chrome]: gnome-shell integrations"
          apt:
            name: chrome-gnome-shell
            state: latest

- name: "graphics-drivers"
  when: '"graphics-drivers" is defined and "graphics-drivers" in install'
  ignore_errors: yes
  block:
    - name: "[graphics-drivers]: install check"
      stat:
        path: "/etc/apt/sources.list.d/ppa_graphics_drivers_ppa_{{ ansible_distribution_release }}.list"
      register: installcheck
      changed_when: false
    - name: "install"
      when: not installcheck.stat.exists
      block:
        - name: "[graphics-drivers]: adding PPA"
          apt_repository:
            repo: "ppa:graphics-drivers/ppa"
            validate_certs: no
        - name: "[graphics-drivers]: upgrading"
          apt:
            upgrade: "yes"
            update_cache: yes

- name: "insomnia"
  when: '"insomnia" is defined and "insomnia" in install'
  ignore_errors: yes
  block:
    - name: "[insomnia]: install check"
      command: "apt -qq list insomnia"
      register: installcheck
      changed_when: false
    - name: "install"
      when: installcheck.stdout.find("installed") == -1
      block:
        - name: "[insomnia]: apt-keys"
          apt_key:
            url: "https://insomnia.rest/keys/debian-public.key.asc"
            state: present
        - name: "[insomnia]: repository"
          apt_repository:
            repo: "deb https://dl.bintray.com/getinsomnia/Insomnia /"
            filename: "insomnia"
        - name: "[insomnia]: install"
          apt:
            name: insomnia
            state: latest

- name: "obs-studio"
  when: '"obs-studio" is defined and "obs-studio" in install'
  ignore_errors: yes
  block:
    - name: "[obs-studio]: install check"
      command: "apt -qq list obs-studio"
      register: installcheck
      changed_when: false
    - name: "install"
      when: installcheck.stdout.find("installed") == -1
      block:
        - name: "[obs-studio]: ppa"
          apt_repository:
            repo: "ppa:obsproject/obs-studio"
            validate_certs: no
        - name: "[obs-studio]: install"
          apt:
            name: obs-studio
            state: latest

- name: "keybase"
  when: '"keybase" is defined and "keybase" in install'
  block:
    - name: "[keybase]: install check"
      command: "apt -qq list keybase"
      register: installcheck
      changed_when: false
    - name: "install"
      when: installcheck.stdout.find("installed") == -1
      block:
        - name: "[keybase]: installing "
          apt:
            deb: "https://prerelease.keybase.io/keybase_amd64.deb"
            state: present

- name: Menlo for Powerline for VScode
  when: '"menlo-font" is defined and "menlo-font" in install'
  become: yes
  become_user: "{{ user }}"
  block:
    - name: "[menlo-font]: install check"
      stat:
        path: "/home/{{ user }}/.local/share/fonts/Menlo for Powerline.ttf"
      register: installcheck
    - name: "Install Menlo for Powerline"
      when: "not installcheck.stat.exists"
      block:
        - name: "[menlo-font]: fonts folder"
          file:
            path: "/home/{{ user }}/.local/share/fonts"
            state: directory
            recurse: yes
        - name: "[menlo-font]: cloning repository"
          git:
            repo: https://github.com/abertsch/Menlo-for-Powerline.git
            dest: /tmp/menlo-{{ ansible_date_time.epoch }}
            depth: 1
            force: yes
        - name: "[menlo-font]: installing font"
          copy:
            src: "/tmp/menlo-{{ ansible_date_time.epoch }}/Menlo for Powerline.ttf"
            dest: "/home/{{ user }}/.local/share/fonts"
        - name: "[menlo-font]: updating font cache"
          command: fc-cache -f -v

- name: "meslolgs-font: MesloLGS NF for VScode with P10k"
  tags: fonts
  when: '"meslolgs-font" is defined and "meslolgs-font" in install'
  become: yes
  become_user: "{{ user }}"
  ignore_errors: yes
  block:
    - name: "[meslolgs-font]: install check"
      stat:
        path: "/home/{{ user }}/.local/share/fonts/MesloLGS"
      register: installcheck
    - name: "Install MesloLGS Font"
      when: "not installcheck.stat.exists"
      block:
        - name: "[meslolgs-font]: fonts folder"
          file:
            path: "/home/{{ user }}/.local/share/fonts"
            state: directory
            recurse: yes
        - name: "[meslolgs-font]: cloning repository"
          git:
            repo: https://github.com/romkatv/powerlevel10k-media.git
            dest: /tmp/meslolgsnf-{{ ansible_date_time.epoch }}
            depth: 1
            force: yes
        - name: "[meslolgs-font]: creating font directory"
          file:
            path: /home/{{ user }}/.local/share/fonts/MesloLGS
            state: directory
        - name: "[meslo-font]: copying font"
          copy:
            src: "/tmp/meslolgsnf-{{ ansible_date_time.epoch }}/{{ item.name }}"
            dest: "/home/{{ user }}/.local/share/fonts/MesloLGS/{{ item.name }}"
          with_items:
            - { name: "MesloLGS NF Regular.ttf" }
            - { name: "MesloLGS NF Bold.ttf" }
            - { name: "MesloLGS NF Italic.ttf" }
            - { name: "MesloLGS NF Bold Italic.ttf" }
        - name: "[meslo-font]: updating font cache"
          command: fc-cache -f -v
        - name: "[meslo-font]: cleaning"
          file:
            path: "/tmp/nerd-fonts-{{ ansible_date_time.epoch }}"
            state: absent
      rescue:
        - debug:
            msg: "Error installing MesloLGS NF Font"

- name: nerdfonts
  tags: fonts
  when: '"nerdfonts" is defined and "nerdfonts" in install'
  ignore_errors: yes
  become: yes
  become_user: "{{ user }}"
  block:
    - name: "[nerdfonts]: install check"
      stat:
        path: "/home/{{ user }}/.local/share/fonts/NerdFonts"
      register: installcheck
    - name: "nerdfonts: install"
      when: "not installcheck.stat.exists"
      block:
        - name: "[nerdfonts]: fonts folder"
          file:
            path: "/home/{{ user }}/.local/share/fonts"
            state: directory
            recurse: yes
        - name: "[nerdfonts]: git clone"
          git:
            repo: https://github.com/ryanoasis/nerd-fonts.git
            dest: "/tmp/nerd-fonts-{{ ansible_date_time.epoch }}"
            depth: 1
        - name: "[nerdfonts]: installing"
          command: "/tmp/nerd-fonts-{{ ansible_date_time.epoch }}/install.sh -U"
        - name: "[menlo-font]: cleaning"
          file:
            path: "/tmp/nerd-fonts-{{ ansible_date_time.epoch }}"
            state: absent
      rescue:
        - debug:
            msg: "Error installing nerdfonts"

- name: r-base
  tags: programming, R
  when: '"r-base" is defined and "r-base" in install'
  block:
    - name: "[r-base]: keyserver"
      apt_key:
        keyserver: "keyserver.ubuntu.com"
        id: "E298A3A825C0D65DFD57CBB651716619E084DAB9"
        state: present
    - name: "[r-base]: apt-repository"
      apt_repository:
        repo: "deb https://cloud.r-project.org/bin/linux/ubuntu focal-cran35/"
        validate_certs: no
    - name: "[r-base]: packages"
      apt:
        name: "{{ item }}"
        state: latest
        cache_valid_time: 3600
      loop:
        - libssl-dev
        - libcurl4-openssl-dev
        - r-base

- name: R-studio
  when: '"R-studio" is defined and "R-studio" in install'
  tags: programming, R, ide, rstudio
  ignore_errors: yes
  block:
    - name: "[R-studio]: packages facts"
      package_facts:
        manager: auto
    - debug:
        var: "ansible_facts.packages['rstudio'][0].version"
        verbosity: 4
    - name: "[R-studio]: install" #TODO: debug
      apt:
        deb: "https://download1.rstudio.org/desktop/bionic/amd64/rstudio-{{ rstudio_version }}-amd64.deb"
        state: present
      when: "ansible_facts.packages['rstudio'][0].version != rstudio_version"

- name: "paper-icon-theme"
  when: '"paper-icon-theme" is defined and "paper-icon-theme" in install'
  ignore_errors: yes
  block:
    - name: "[paper-icon-theme]: install check"
      command: "apt -qq list paper-icon-theme"
      register: papercheck
      changed_when: false
    - name: "install"
      when: papercheck.stdout.find("installed") == -1
      block:
        - name: "[paper-icon-theme] adding PPA"
          apt_repository:
            repo: "ppa:snwh/ppa"
            validate_certs: no
        - name: "[paper-icon-theme] installing..."
          apt:
            name: "paper-icon-theme"
            state: latest

- name: python3-packages
  tags: programming, python
  when: '"python3-packages" is defined and "python3-packages" in install'
  block:
    - name: "[python3-packages]: Install Python 3"
      apt:
        dpkg_options: "force-confold,force-confdef"
        autoremove: yes
        cache_valid_time: 3600
        name: "{{ item }}"
        state: latest
      loop:
        - python3
        - python3-pip
    - name: "[python3-packages]: installing pip3 packages"
      pip:
        name: "{{ item }}"
      loop:
        - http-prompt # https://pypi.org/project/http-prompt/ - http client
        - ansible-lint
        # Python Code Tools: https://levelup.gitconnected.com/10-tools-i-use-to-craft-better-python-code
        - black # https://pypi.org/project/black/ - PEP recomendations
        - eradicate #
        - vulture # https://pypi.org/project/vulture/ - find unused code
        - coverage # https://pypi.org/project/coverage/ - python code analysis
        - pylint # https://pypi.org/project/pylint/ - linter
        - mypy # https://pypi.org/project/mypy/
        - bandit # https://pypi.org/project/bandit/ - security testing
        - radon # https://pypi.org/project/radon/ - SAST

- name: terminator
  when: '"terminator" is defined and "terminator" in install'
  block:
    - name: "[terminator]: ppa repository"
      apt_repository:
        repo: "ppa:gnome-terminator/nightly-gtk3"
        validate_certs: no
        codename: trusty
    - name: "[terminator]:: install"
      apt:
        name: terminator
        state: latest
        cache_valid_time: 3600

- name: "typora: Markdown Editor"
  when: '"typora" is defined and "typora" in install'
  ignore_errors: true
  block:
    - name: "[typora]: install check"
      command: "which typora"
      register: typoracheck
      changed_when: false
      failed_when: false
      no_log: true
    - name: "[typora]: installing"
      when: typoracheck.rc == 1
      block:
        - name: "[typora]: pgp apt-key"
          apt_key:
            url: "https://typora.io/linux/public-key.asc"
            state: present
        - name: "[typora] Adding PPA"
          apt_repository:
            repo: "deb https://typora.io/linux ./"
            validate_certs: no
        - name: "[typora] Installing"
          apt:
            name: "typora"
            state: latest

- name: virtualbox
  tags: virtualbox
  when: '"virtualbox" is defined and "virtualbox" in install'
  block:
    - name: "[virtualbox]: apt-keys"
      apt_key:
        url: "{{ item }}"
        state: present
      loop:
        - "https://www.virtualbox.org/download/oracle_vbox_2016.asc"
        - "https://www.virtualbox.org/download/oracle_vbox.asc"
    - name: "[virtualbox]: repository"
      apt_repository:
        repo: "deb [arch=amd64] https://download.virtualbox.org/virtualbox/debian focal contrib"
    - name: "[virtualbox]: upgrade"
      apt:
        upgrade: "yes"
        update_cache: yes
    - name: "[virtualbox]: install"
      apt:
        name: virtualbox
        state: latest

- name: "visual-studio-code"
  when: '"visual-studio-code" is defined and "visual-studio-code" in install'
  block:
    - name: "[visual-studio-code]: install check"
      command: "apt -qq list code"
      register: installcheck
      changed_when: false
    - name: "install"
      when: installcheck.stdout.find("installed") == -1
      block:
        - name: "[visual-studio-code]: Installing requirements"
          apt:
            name: "{{ item }}"
            state: latest
          loop:
            - software-properties-common
            - apt-transport-https
            - wget
        - name: "[visual-studio-code]: Downloading GPG keys"
          apt_key:
            url: "https://packages.microsoft.com/keys/microsoft.asc"
            state: present
        - name: "[visual-studio-code]: Adding repository"
          apt_repository:
            repo: "deb [arch=amd64] https://packages.microsoft.com/repos/vscode stable main"
            filename: "vscode"
        - name: "[visual-studio-code]: Install"
          apt:
            name: "code"
            state: latest

# Example use of external roles
# Warning: Deprecated! Use Shan.code-settings-sync extension.
- name: vscode-extensions
  when: '"vscode-extensions" is defined and "vscode-extensions" in install'
  block:
    - name: "VSCode Extensions"
      ignore_errors: yes
      include_role:
        name: ansible-role-visual-studio-code-extensions
      vars:
        visual_studio_code_extensions_build: stable
        users:
          - username: "{{ user }}"
            visual_studio_code_extensions:
              # - timonwong.ansible-autocomplete
              # - dbaeumer.vscode-eslint
              # - donjayamanne.githistory
              # - auchenberg.vscode-browser-preview
              # - shd101wyy.markdown-preview-enhanced
              - Shan.code-settings-sync
              # # Visual
              # - equinusocio.vsc-material-theme
              # - pkief.material-icon-theme
              # - azemoh.one-monokai
              # - CoenraadS.bracket-pair-colorizer-2
              # - esbenp.prettier-vscode
              # - johnpapa.vscode-peacock
              # - marqu3s.aurora-x
              # # Theme
              # - arcticicestudio.nord-visual-studio-code
              # # Terraform
              # - 4ops.terraform
              # # Docker
              # - ms-vscode-remote.remote-containers
              # - ms-azuretools.vscode-docker
              # - formulahendry.docker-explorer
              # # Python
              # - ms-python.python
              # - dongli.python-preview
              # - njpwerner.autodocstring
              # - LittleFoxTeam.vscode-python-test-adapter
              # - ms-pyright.pyright
              # # Rust
              # - swellaby.rust-pack
              # - JScearcy.rust-doc-viewer
              # - polypus74.trusty-rusty-snippets
            # # How to exclude extensions
            # visual_studio_code_extensions_absent:
            #   - seanmcbreen.Spell
